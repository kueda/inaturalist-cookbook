vcl 4.0;
import directors;

<%- node["windshaft_servers"].each do |server| -%>
backend <%= server["name"] %> {
  .host = "<%= server["ipaddress"] %>";
  .port = "4000";
}
<%- end -%>

sub vcl_init {
    new cluster1 = directors.round_robin();
    <%- node["windshaft_servers"].each do |server| -%>
    cluster1.add_backend(<%= server["name"] %>);
    <%- end -%>
}

sub vcl_backend_error {
  set beresp.http.Content-Type = "text/html; charset=utf-8";
  set beresp.http.Retry-After = "5";
  synthetic( {"
    <?xml version="1.0" encoding="utf-8"?>
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
    <html>
      <head>
      <title>"} + beresp.status + " " + beresp.reason + {"</title>
      </head>
      <body>
      <h1>Error "} + beresp.status + " " + beresp.reason + {"</h1>
      <p>"} + beresp.reason + {"</p>
      <h3>Guru Meditation. Ommmmmm.</h3>
      <p>XID: "} + bereq.xid + {"</p>
      <hr>
      <p>Varnish cache server</p>
      </body>
    </html>
  "} );
  return (deliver);
}

# access control list for "purge": open to only localhost and other local nodes
acl purge {
  "127.0.0.1";
}

# vcl_recv is called whenever a request is received
sub vcl_recv {
  # Serve objects up to 2 minutes past their expiry if the backend
  # is slow to respond.
  #set req.grace = 120s;
  set req.http.X-Forwarded-For = client.ip;
  set req.backend_hint = cluster1.backend();

  # This uses the ACL action called "purge". Basically if a request to
  # PURGE the cache comes from anywhere other than localhost, ignore it.
  if (req.method == "PURGE") {
    if (!client.ip ~ purge) {
      return(synth(405,"Not allowed."));
    }
    return(hash);
  }

  # Pass any requests that Varnish does not understand straight to the backend.
  if (req.method != "GET" && req.method != "HEAD" &&
      req.method != "PUT" && req.method != "POST" &&
      req.method != "TRACE" && req.method != "OPTIONS" &&
      req.method != "DELETE") {
    return(pipe);
  } /* Non-RFC2616 or CONNECT which is weird. */

  # Pass anything other than GET and HEAD directly.
  if (req.method != "GET" && req.method != "HEAD") {
    return(pass);
  } /* We only deal with GET and HEAD by default */

  # Pass requests from logged-in users directly.
  if (req.http.Authorization) {
    return(pass);
  } /* Not cacheable by default */

  # Pass any requests with the "If-None-Match" header directly.
  if (req.http.If-None-Match) {
    return(pass);
  }

  # Force lookup if the request is a no-cache request from the client.
  if (req.http.Cache-Control ~ "no-cache") {
    ban(req.url);
  }

  # normalize Accept-Encoding to reduce vary
  if (req.http.Accept-Encoding) {
    if (req.http.User-Agent ~ "MSIE 6") {
      unset req.http.Accept-Encoding;
    } elsif (req.http.Accept-Encoding ~ "gzip") {
      set req.http.Accept-Encoding = "gzip";
    } elsif (req.http.Accept-Encoding ~ "deflate") {
      set req.http.Accept-Encoding = "deflate";
    } else {
      unset req.http.Accept-Encoding;
    }
  }
  return(hash);
}

sub vcl_pipe {
  # Note that only the first request to the backend will have
  # X-Forwarded-For set.  If you use X-Forwarded-For and want to
  # have it set for all requests, make sure to have:
  # set req.http.connection = "close";

  # This is otherwise not necessary if you do not do any request rewriting.
  set req.http.connection = "close";
}

# Called if the cache has a copy of the page.
sub vcl_hit {
  if (req.method == "PURGE") {
    ban(req.url);
    return(synth(200,"Purged"));
  }
  if (obj.ttl >= 0s) {
    return (deliver);
  }
  if (obj.ttl + obj.grace > 0s) {
    return (deliver);
  }
  return (fetch);
}

# Called if the cache does not have a copy of the page.
sub vcl_miss {
  if (req.method == "PURGE") {
    return(synth(200,"Not in cache"));
  }
}

sub vcl_deliver {
  # Sometimes it's nice to see when content has been served from the cache.
  if (obj.hits > 0) {
    # If the object came from the cache, set an HTTP header to say so
    set resp.http.X-Cache = "HIT";
  } else {
    set resp.http.X-Cache = "MISS";
  }

  # For security and asthetic reasons, remove some HTTP headers before final delivery...
  unset resp.http.Server;
  unset resp.http.X-Powered-By;
  unset resp.http.Via;
  unset resp.http.X-Varnish;
  unset resp.http.X-Tiler-Profiler;
  unset resp.http.X-Windshaft-Cache;
}

# Called after a document has been successfully retrieved from the backend.
sub vcl_backend_response {

  if (!beresp.ttl > 0s) {
    set beresp.uncacheable = true;
    return (deliver);
  }

  if (beresp.http.Set-Cookie) {
    set beresp.uncacheable = true;
    return (deliver);
  }

  # if (beresp.http.Cache-Control ~ "(private|no-cache|no-store)") {
  #   set beresp.uncacheable = true;
  #   return (deliver);
  # }

  if (beresp.http.Authorization && !beresp.http.Cache-Control ~ "public") {
    set beresp.uncacheable = true;
    return (deliver);
  }

  return (deliver);
}
